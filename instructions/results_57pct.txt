See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 3 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  16/43 tests passed
Memory:       105/105 tests passed
Timing:       192/193 tests passed

Aggregate score: 57.22%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.8K Mar  5 16:52 Deque.java
1.1K Mar  5 16:52 Permutation.java
5.5K Mar  5 16:52 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:22: warning: [unchecked] unchecked cast
        a = (Item[]) new Object[2];
                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:53: warning: [unchecked] unchecked cast
        Item[] temp = (Item[]) new Object[capacity];
                               ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:156: warning: [rawtypes] found raw type: Iterator
                    Iterator iter = randQ.iterator();
                    ^
  missing type arguments for generic class Iterator<E>
  where E is a type-variable:
    E extends Object declared in interface Iterator
3 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:173:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:188:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:218:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:234:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------
[INFO] RandomizedQueue.java:102: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
==> passed

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
  * n = 10
  * n = 1000
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
  * m = 50
  * m = 100
  * m = 1000
==> passed

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
    - fails to throw an exception when calling addFirst() with a null argument

    - fails to throw an exception when calling addLast() with a null argument

==> FAILED

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 15/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
resizing to new capacity: 4
resizing to new capacity: 8
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
resizing to new capacity: 1024
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
resizing to new capacity: 4
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
resizing to new capacity: 1024
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
resizing to new capacity: 1024
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
resizing to new capacity: 4
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
resizing to new capacity: 4
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 512
resizing to new capacity: 1024
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
resizing to new capacity: 4
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 16
resizing to new capacity: 8
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 2
  * n = 100
resizing to new capacity: 4
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 128
resizing to new capacity: 64
resizing to new capacity: 64
resizing to new capacity: 32
resizing to new capacity: 32
resizing to new capacity: 16
resizing to new capacity: 16
resizing to new capacity: 8
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 2
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 10
  * n = 50
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 0
  * m = 1000
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 16
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 2
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 128
resizing to new capacity: 256
resizing to new capacity: 51
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
resizing to new capacity: 10
    - outer iterator failed to return one (or more) of the 10 items
    - outer iterator returned the same item more than once

  * n = 50
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
resizing to new capacity: 50
    - outer iterator failed to return one (or more) of the 50 items
    - outer iterator returned the same item more than once

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 10
resizing to new capacity: 10
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

  * n = 50
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 32
resizing to new capacity: 64
resizing to new capacity: 50
resizing to new capacity: 50
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

==> FAILED

Test 11: create two iterators over different randomized queues
resizing to new capacity: 4
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 8
resizing to new capacity: 16
resizing to new capacity: 16
resizing to new capacity: 10
resizing to new capacity: 10
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
resizing to new capacity: 4
  * n = 5, trials = 12000
resizing to new capacity: 4
resizing to new capacity: 8
  * n = 8, trials = 12000
resizing to new capacity: 4
resizing to new capacity: 8
  * n = 10, trials = 12000
resizing to new capacity: 4
resizing to new capacity: 8
resizing to new capacity: 16
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
